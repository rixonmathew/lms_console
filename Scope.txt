Things to be incorporated
=========================
 introduce command (list) to show details of given item id ( should show instance id and other details that are required for reserving the book and checking out the book)
 Add business logic in reserve and checkout to not allow reserve/ check out when the item is already check out
 introduce command to check out item
 introduce command to see items checked out to user
 introduce command to see who has checked out a particular book
 introduce command to see reservations against a book
 introduce command to execute canned reports based on user inputs
 Consolidate all the places where operation is used in a map. Create a meta model for a command
 do clean up before exit
 integrate the GUI of LMS with LMSConsole
 modify search result to show the count of objects available
 introduce flags for commands to show additional options
 modify search to search by id, free form search
 introduce concept of roles for users
 integrate command with features to restrict users to execute only those features that they can access
 Introduce command to add new user into the system
 Introduce command to add new media item into the system
 break service into separate module
 break gui into a separate module and use service module separately
 create web base gui
 integrate with spring roo
 create a graph db to hold the data
 Integrate with Spring data to switch between SQL and Neo4J
 Integrate with sitemesh to create a composite page for creating a rich gui
 Front end should be done using HTML5 and CSS3 to make a rich gui
 Integrate with mysql database after complete application is done using hsql
 create sizing document for hsql db based on max
 Create indexes based on search performance
 Create pause effect in console to limit the output one screen at a time


Refactorings
============
 Rename all Simple* classes to a more meaningful name
 Command Interpreter that converts the command to the query language for the service.

Done
==========
 Creating command objects from command string
 Validating the syntax of specific commands e.g. search should be followed by specific parameters else command
 is invalid
 help command should list out all possible commands in the system
 Command processor that takes a valid command object and provides the Result object
 Create mock/real service to provide the data for the command
 Validate Search results
 Validate results of other commands
 Handle specific help
 Do not treat exit as invalid command
 Update datapump to create item instance properties
 Introduce DAO to get the data from data store
 Introduce LMSMain and add tests for LMSConsole
 Introduce list command to see users and their details
 Result formatter that provides formatted output for the console based on the result
 integrate with life cycle of maven to run by connecting to the database
 modify search result to show the count of items available
 If the command is invalid the message to user should be different
 Create timer to show the time taken to display the results in the console
